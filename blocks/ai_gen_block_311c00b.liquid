{% doc %}
  @prompt
    Create a sticky navigation bar with tabs for product sections (Ranger S, Mars 2.0, Horizon) that smoothly scrolls to corresponding YouTube video gallery sections when clicked. Include hover effects and active state styling for the tabs.

{% enddoc %}
{% assign ai_gen_id = block.id | replace: '_', '' | downcase %}

{% style %}
  .ai-sticky-nav-{{ ai_gen_id }} {
    position: sticky;
    top: 0;
    z-index: 100;
    background-color: {{ block.settings.nav_background_color }};
    border-bottom: 1px solid {{ block.settings.border_color }};
    padding: {{ block.settings.nav_padding }}px 0;
    transition: all 0.3s ease;
  }

  .ai-sticky-nav-container-{{ ai_gen_id }} {
    max-width: {{ settings.page_width }}px;
    margin: 0 auto;
    padding: 0 20px;
  }

  .ai-sticky-nav-tabs-{{ ai_gen_id }} {
    display: flex;
    justify-content: {{ block.settings.tab_alignment }};
    gap: {{ block.settings.tab_spacing }}px;
    list-style: none;
    margin: 0;
    padding: 0;
  }

  .ai-sticky-nav-tab-{{ ai_gen_id }} {
    position: relative;
  }

  .ai-sticky-nav-link-{{ ai_gen_id }} {
    display: block;
    padding: {{ block.settings.tab_padding_vertical }}px {{ block.settings.tab_padding_horizontal }}px;
    color: {{ block.settings.tab_text_color }};
    text-decoration: none;
    font-size: {{ block.settings.tab_font_size }}px;
    font-weight: {{ block.settings.tab_font_weight }};
    border-radius: {{ block.settings.tab_border_radius }}px;
    transition: all 0.3s ease;
    cursor: pointer;
    background-color: transparent;
    border: 2px solid transparent;
  }

  .ai-sticky-nav-link-{{ ai_gen_id }}:hover {
    color: {{ block.settings.tab_hover_text_color }};
    background-color: {{ block.settings.tab_hover_background_color }};
    border-color: {{ block.settings.tab_hover_border_color }};
    transform: translateY(-2px);
  }

  .ai-sticky-nav-link-{{ ai_gen_id }}.active {
    color: {{ block.settings.tab_active_text_color }};
    background-color: {{ block.settings.tab_active_background_color }};
    border-color: {{ block.settings.tab_active_border_color }};
  }

  .ai-video-section-{{ ai_gen_id }} {
    padding: {{ block.settings.section_padding }}px 0;
    scroll-margin-top: 100px;
  }

  .ai-video-section-container-{{ ai_gen_id }} {
    max-width: {{ settings.page_width }}px;
    margin: 0 auto;
    padding: 0 20px;
  }

  .ai-video-section-title-{{ ai_gen_id }} {
    font-size: {{ block.settings.section_title_size }}px;
    color: {{ block.settings.section_title_color }};
    margin-bottom: {{ block.settings.title_margin_bottom }}px;
    text-align: center;
  }

  .ai-video-gallery-{{ ai_gen_id }} {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
    gap: {{ block.settings.video_gap }}px;
    margin-top: 20px;
  }

  .ai-video-item-{{ ai_gen_id }} {
    position: relative;
    aspect-ratio: 16 / 9;
    border-radius: {{ block.settings.video_border_radius }}px;
    overflow: hidden;
    background-color: #f0f0f0;
  }

  .ai-video-item-{{ ai_gen_id }} iframe {
    width: 100%;
    height: 100%;
    border: none;
  }

  .ai-video-placeholder-{{ ai_gen_id }} {
    width: 100%;
    height: 100%;
    display: flex;
    align-items: center;
    justify-content: center;
    background-color: #f4f4f4;
    color: #666;
    font-size:14px;
  }

  @media screen and (max-width: 768px) {
    .ai-sticky-nav-tabs-{{ ai_gen_id }} {
      flex-direction: column;
      gap: 10px;
    }

    .ai-sticky-nav-link-{{ ai_gen_id }} {
      text-align: center;
      padding: 12px 16px;
    }

    .ai-video-gallery-{{ ai_gen_id }} {
      grid-template-columns: 1fr;
    }
  }
{% endstyle %}

<sticky-nav-{{ ai_gen_id }} {{ block.shopify_attributes }}>
  <nav class="ai-sticky-nav-{{ ai_gen_id }}">
    <div class="ai-sticky-nav-container-{{ ai_gen_id }}">
      <ul class="ai-sticky-nav-tabs-{{ ai_gen_id }}">
        {% if block.settings.show_ranger_s %}
          <li class="ai-sticky-nav-tab-{{ ai_gen_id }}">
            <a href="#ranger-s-{{ ai_gen_id }}" class="ai-sticky-nav-link-{{ ai_gen_id }}" data-target="ranger-s-{{ ai_gen_id }}">
              {{ block.settings.ranger_s_label }}
            </a>
          </li>
        {% endif %}
        {% if block.settings.show_mars %}
          <li class="ai-sticky-nav-tab-{{ ai_gen_id }}">
            <a href="#mars-{{ ai_gen_id }}" class="ai-sticky-nav-link-{{ ai_gen_id }}" data-target="mars-{{ ai_gen_id }}">
              {{ block.settings.mars_label }}
            </a>
          </li>
        {% endif %}
        {% if block.settings.show_horizon %}
          <li class="ai-sticky-nav-tab-{{ ai_gen_id }}">
            <a href="#horizon-{{ ai_gen_id }}" class="ai-sticky-nav-link-{{ ai_gen_id }}" data-target="horizon-{{ ai_gen_id }}">
              {{ block.settings.horizon_label }}
            </a>
          </li>
        {% endif %}
      </ul>
    </div>
  </nav>

  {% if block.settings.show_ranger_s %}
    <section id="ranger-s-{{ ai_gen_id }}" class="ai-video-section-{{ ai_gen_id }}">
      <div class="ai-video-section-container-{{ ai_gen_id }}">
        <h2 class="ai-video-section-title-{{ ai_gen_id }}">{{ block.settings.ranger_s_title }}</h2>
        <div class="ai-video-gallery-{{ ai_gen_id }}">
          {% for i in (1..3) %}
            {% assign video_key = 'ranger_s_video_' | append: i %}
            {% assign video_url = block.settings[video_key] %}
            <div class="ai-video-item-{{ ai_gen_id }}">
              {% if video_url != blank %}
                {% assign video_id = video_url | split: 'v=' | last | split: '&' | first %}
                {% if video_id != blank %}
                  <iframe
                    src="https://www.youtube.com/embed/{{ video_id }}"
                    title="Ranger S Video {{ i }}"
                    allowfullscreen
                    loading="lazy"
                  ></iframe>
                {% else %}
                  <div class="ai-video-placeholder-{{ ai_gen_id }}">Invalid YouTube URL</div>
                {% endif %}
              {% else %}
                <div class="ai-video-placeholder-{{ ai_gen_id }}">Add YouTube video URL</div>
              {% endif %}
            </div>
          {% endfor %}
        </div>
      </div>
    </section>
  {% endif %}

  {% if block.settings.show_mars %}
    <section id="mars-{{ ai_gen_id }}" class="ai-video-section-{{ ai_gen_id }}">
      <div class="ai-video-section-container-{{ ai_gen_id }}">
        <h2 class="ai-video-section-title-{{ ai_gen_id }}">{{ block.settings.mars_title }}</h2>
        <div class="ai-video-gallery-{{ ai_gen_id }}">
          {% for i in (1..3) %}
            {% assign video_key = 'mars_video_' | append: i %}
            {% assign video_url = block.settings[video_key] %}
            <div class="ai-video-item-{{ ai_gen_id }}">
              {% if video_url != blank %}
                {% assign video_id = video_url | split: 'v=' | last | split: '&' | first %}
                {% if video_id != blank %}
                  <iframe
                    src="https://www.youtube.com/embed/{{ video_id }}"
                    title="Mars 2.0 Video {{ i }}"
                    allowfullscreen
                    loading="lazy"
                  ></iframe>
                {% else %}
                  <div class="ai-video-placeholder-{{ ai_gen_id }}">Invalid YouTube URL</div>
                {% endif %}
              {% else %}
                <div class="ai-video-placeholder-{{ ai_gen_id }}">Add YouTube video URL</div>
              {% endif %}
            </div>
          {% endfor %}
        </div>
      </div>
    </section>
  {% endif %}

  {% if block.settings.show_horizon %}
    <section id="horizon-{{ ai_gen_id }}" class="ai-video-section-{{ ai_gen_id }}">
      <div class="ai-video-section-container-{{ ai_gen_id }}">
        <h2 class="ai-video-section-title-{{ ai_gen_id }}">{{ block.settings.horizon_title }}</h2>
        <div class="ai-video-gallery-{{ ai_gen_id }}">
          {% for i in (1..3) %}
            {% assign video_key = 'horizon_video_' | append: i %}
            {% assign video_url = block.settings[video_key] %}
            <div class="ai-video-item-{{ ai_gen_id }}">
              {% if video_url != blank %}
                {% assign video_id = video_url | split: 'v=' | last | split: '&' | first %}
                {% if video_id != blank %}
                  <iframe
                    src="https://www.youtube.com/embed/{{ video_id }}"
                    title="Horizon Video {{ i }}"
                    allowfullscreen
                    loading="lazy"
                  ></iframe>
                {% else %}
                  <div class="ai-video-placeholder-{{ ai_gen_id }}">Invalid YouTube URL</div>
                {% endif %}
              {% else %}
                <div class="ai-video-placeholder-{{ ai_gen_id }}">Add YouTube video URL</div>
              {% endif %}
            </div>
          {% endfor %}
        </div>
      </div>
    </section>
  {% endif %}
</sticky-nav-{{ ai_gen_id }}>

<script>
(function() {
  class StickyNav{{ ai_gen_id }} extends HTMLElement {
    constructor() {
      super();
    }

    connectedCallback() {
      this.setupSmoothScrolling();
      this.setupActiveStates();
    }

    setupSmoothScrolling() {
      const links = this.querySelectorAll('.ai-sticky-nav-link-{{ ai_gen_id }}');
      links.forEach(link => {
        link.addEventListener('click', (e) => {
          e.preventDefault();
          const targetId = link.getAttribute('data-target');
          const targetElement = document.getElementById(targetId);
          
          if (targetElement) {
            targetElement.scrollIntoView({
              behavior: 'smooth',
              block: 'start'
            });
          }
        });
      });
    }

    setupActiveStates() {
      const links = this.querySelectorAll('.ai-sticky-nav-link-{{ ai_gen_id }}');
      const sections = Array.from(links).map(link => {
        const targetId = link.getAttribute('data-target');
        return {
          link: link,
          section: document.getElementById(targetId)
        };
      }).filter(item => item.section);

      const observer = new IntersectionObserver((entries) => {
        entries.forEach(entry => {
          if (entry.isIntersecting) {
            links.forEach(link => link.classList.remove('active'));
            const activeLink = sections.find(item => item.section === entry.target)?.link;
            if (activeLink) {
              activeLink.classList.add('active');
            }
          }
        });
      }, {
        threshold: 0.3,
        rootMargin: '-100px 0px -50% 0px'
      });

      sections.forEach(item => {
        if (item.section) {
          observer.observe(item.section);
        }
      });
    }
  }

  customElements.define('sticky-nav-{{ ai_gen_id }}', StickyNav{{ ai_gen_id }});
})();
</script>

{% schema %}
{
  "name": "Sticky video nav",
  "settings": [
    {
      "type": "header",
      "content": "Navigation style"
    },
    {
      "type": "color",
      "id": "nav_background_color",
      "label": "Background color",
      "default": "#ffffff"
    },
    {
      "type": "color",
      "id": "border_color",
      "label": "Border color",
      "default": "#e0e0e0"
    },
    {
      "type": "range",
      "id": "nav_padding",
      "min": 5,
      "max": 30,
      "step": 1,
      "unit": "px",
      "label": "Padding",
      "default": 15
    },
    {
      "type": "select",
      "id": "tab_alignment",
      "label": "Tab alignment",
      "options": [
        {
          "value": "flex-start",
          "label": "Left"
        },
        {
          "value": "center",
          "label": "Center"
        },
        {
          "value": "flex-end",
          "label": "Right"
        }
      ],
      "default": "center"
    },
    {
      "type": "range",
      "id": "tab_spacing",
      "min": 10,
      "max": 50,
      "step": 2,
      "unit": "px",
      "label": "Tab spacing",
      "default": 20
    },
    {
      "type": "header",
      "content": "Tab style"
    },
    {
      "type": "color",
      "id": "tab_text_color",
      "label": "Text color",
      "default": "#333333"
    },
    {
      "type": "color",
      "id": "tab_hover_text_color",
      "label": "Hover text color",
      "default": "#000000"
    },
    {
      "type": "color",
      "id": "tab_hover_background_color",
      "label": "Hover background",
      "default": "#f5f5f5"
    },
    {
      "type": "color",
      "id": "tab_hover_border_color",
      "label": "Hover border color",
      "default": "#cccccc"
    },
    {
      "type": "color",
      "id": "tab_active_text_color",
      "label": "Active text color",
      "default": "#ffffff"
    },
    {
      "type": "color",
      "id": "tab_active_background_color",
      "label": "Active background",
      "default": "#000000"
    },
    {
      "type": "color",
      "id": "tab_active_border_color",
      "label": "Active border color",
      "default": "#000000"
    },
    {
      "type": "range",
      "id": "tab_font_size",
      "min": 12,
      "max": 24,
      "step": 1,
      "unit": "px",
      "label": "Font size",
      "default": 16
    },
    {
      "type": "select",
      "id": "tab_font_weight",
      "label": "Font weight",
      "options": [
        {
          "value": "400",
          "label": "Normal"
        },
        {
          "value": "500",
          "label": "Medium"
        },
        {
          "value": "600",
          "label": "Semi-bold"
        },
        {
          "value": "700",
          "label": "Bold"
        }
      ],
      "default": "500"
    },
    {
      "type": "range",
      "id": "tab_padding_vertical",
      "min": 5,
      "max": 20,
      "step": 1,
      "unit": "px",
      "label": "Vertical padding",
      "default": 10
    },
    {
      "type": "range",
      "id": "tab_padding_horizontal",
      "min": 10,
      "max": 40,
      "step": 2,
      "unit": "px",
      "label": "Horizontal padding",
      "default": 20
    },
    {
      "type": "range",
      "id": "tab_border_radius",
      "min": 0,
      "max": 20,
      "step": 1,
      "unit": "px",
      "label": "Border radius",
      "default": 6
    },
    {
      "type": "header",
      "content": "Ranger S section"
    },
    {
      "type": "checkbox",
      "id": "show_ranger_s",
      "label": "Show Ranger S section",
      "default": true
    },
    {
      "type": "text",
      "id": "ranger_s_label",
      "label": "Tab label",
      "default": "Ranger S"
    },
    {
      "type": "text",
      "id": "ranger_s_title",
      "label": "Section title",
      "default": "Ranger S Videos"
    },
    {
      "type": "url",
      "id": "ranger_s_video_1",
      "label": "Video 1URL"
    },
    {
      "type": "url",
      "id": "ranger_s_video_2",
      "label": "Video 2 URL"
    },
    {
      "type": "url",
      "id": "ranger_s_video_3",
      "label": "Video 3 URL"
    },
    {
      "type": "header",
      "content": "Mars2.0 section"
    },
    {
      "type": "checkbox",
      "id": "show_mars",
      "label": "Show Mars 2.0 section",
      "default": true
    },
    {
      "type": "text",
      "id": "mars_label",
      "label": "Tab label",
      "default": "Mars 2.0"
    },
    {
      "type": "text",
      "id": "mars_title",
      "label": "Section title",
      "default": "Mars 2.0 Videos"
    },
    {
      "type": "url",
      "id": "mars_video_1",
      "label": "Video 1 URL"
    },
    {
      "type": "url",
      "id": "mars_video_2",
      "label": "Video 2 URL"
    },
    {
      "type": "url",
      "id": "mars_video_3",
      "label": "Video 3 URL"
    },
    {
      "type": "header",
      "content": "Horizon section"
    },
    {
      "type": "checkbox",
      "id": "show_horizon",
      "label": "Show Horizon section",
      "default": true
    },
    {
      "type": "text",
      "id": "horizon_label",
      "label": "Tab label",
      "default": "Horizon"
    },
    {
      "type": "text",
      "id": "horizon_title",
      "label": "Section title",
      "default": "Horizon Videos"
    },
    {
      "type": "url",
      "id": "horizon_video_1",
      "label": "Video 1 URL"
    },
    {
      "type": "url",
      "id": "horizon_video_2",
      "label": "Video 2 URL"
    },
    {
      "type": "url",
      "id": "horizon_video_3",
      "label": "Video 3 URL"
    },
    {
      "type": "header",
      "content": "Section layout"
    },
    {
      "type": "color",
      "id": "section_title_color",
      "label": "Section title color",
      "default": "#000000"
    },
    {
      "type": "range",
      "id": "section_title_size",
      "min": 18,
      "max": 40,
      "step": 2,
      "unit": "px",
      "label": "Section title size",
      "default": 28
    },
    {
      "type": "range",
      "id": "section_padding",
      "min": 20,
      "max": 80,
      "step": 5,
      "unit": "px",
      "label": "Section padding",
      "default": 40
    },
    {
      "type": "range",
      "id": "title_margin_bottom",
      "min": 10,
      "max": 50,
      "step": 5,
      "unit": "px",
      "label": "Title margin bottom",
      "default": 20
    },
    {
      "type": "range",
      "id": "video_gap",
      "min": 10,
      "max": 40,
      "step": 2,
      "unit": "px",
      "label": "Video gap",
      "default": 20
    },
    {
      "type": "range",
      "id": "video_border_radius",
      "min": 0,
      "max": 20,
      "step": 2,
      "unit": "px",
      "label": "Video border radius",
      "default": 8
    }
  ],
  "presets": [
    {
      "name": "Sticky video nav"
    }
  ]
}
{% endschema %}